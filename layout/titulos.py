import streamlit as st
import plotly.express as px
import pandas as pd


# ------------------------------------------------------------
# CONFIGURA√á√ïES GERAIS DO APP
# ------------------------------------------------------------
st.set_page_config(page_title="Painel de An√°lise dos Editais", layout="wide")

st.title("üìä Painel de Acompanhamento dos Editais por Munic√≠pio")

# ------------------------------------------------------------
# FUN√á√ÉO PARA LER E UNIFICAR AS ABAS V√ÅLIDAS
# ------------------------------------------------------------
def carregar_dados(caminho_arquivo):
    abas_excluir = ["AUX", "INDICE", "Log", "CHAMADA", "Configura√ß√£o de Email"]
    xls = pd.ExcelFile(caminho_arquivo)
    dados = []
    for aba in xls.sheet_names:
        if aba not in abas_excluir:
            df = pd.read_excel(xls, aba)
            dados.append(df)
    if dados:
        df_final = pd.concat(dados, ignore_index=True)
        return df_final
    else:
        return pd.DataFrame()

# ------------------------------------------------------------
# UPLOAD DOS ARQUIVOS (UM PARA CADA MUNIC√çPIO)
# ------------------------------------------------------------
st.sidebar.header("üìÇ Envie os arquivos Excel")
st.sidebar.markdown("Cada arquivo deve conter as disciplinas de um munic√≠pio.")

municipios = ["Vit√≥ria", "Serra", "Santa Teresa", "Fund√£o"]

arquivos = {}
for m in municipios:
    arquivos[m] = st.sidebar.file_uploader(f"Arquivo de {m}", type=["xlsx"], key=m)

# ------------------------------------------------------------
# LEITURA DOS ARQUIVOS
# ------------------------------------------------------------
dados_municipios = {}
for m in municipios:
    if arquivos[m]:
        df = carregar_dados(arquivos[m])
        df["Munic√≠pio"] = m
        dados_municipios[m] = df

# ------------------------------------------------------------
# CRIA√á√ÉO DAS ABAS
# ------------------------------------------------------------
aba_geral, aba_barras, aba_pizza = st.tabs([
    "üìä Vis√£o Geral",
    "üèôÔ∏è Gr√°ficos Comparativos entre Munic√≠pios",
    "ü•ß Gr√°ficos de Pizza por Munic√≠pio e Disciplina"
])

# ------------------------------------------------------------
# üìä ABA 1 ‚Äî VIS√ÉO GERAL
# ------------------------------------------------------------
with aba_geral:
    st.header("üìä Vis√£o Geral das Disciplinas por Munic√≠pio")

    for m, df in dados_municipios.items():
        if not df.empty:
            st.subheader(f"üìç {m}")
            
            # Padroniza os nomes das colunas
            df.columns = df.columns.str.strip().str.lower()

            # Estat√≠sticas b√°sicas por disciplina
            st.dataframe(df.describe(include='all'))

            # Gr√°fico de barras por disciplina
            col_disciplina = next((c for c in df.columns if "disciplina" in c), None)
            col_total = next((c for c in df.columns if "total" in c and "candidato" in c), None)

            if col_disciplina and col_total:
                fig_total = px.bar(
                    df,
                    x=col_disciplina,
                    y=col_total,
                    title=f"Total de Candidatos por Disciplina - {m}",
                    labels={"x": "Disciplina", "y": "Quantidade"}
                )
                st.plotly_chart(fig_total, use_container_width=True)

# ------------------------------------------------------------
# üèôÔ∏è ABA 2 ‚Äî GR√ÅFICOS DE BARRAS COMPARATIVOS
# ------------------------------------------------------------
with aba_barras:
    st.header("üèôÔ∏è Comparativo de Disciplinas entre Munic√≠pios")

    # Cria√ß√£o de base consolidada
    dfs_renomeados = []
    for m, df in dados_municipios.items():
        if not df.empty:
            df = df.copy()
            df.columns = df.columns.str.strip().str.lower()
            col_disciplina = next((c for c in df.columns if "disciplina" in c), None)
            col_total = next((c for c in df.columns if "total" in c and "candidato" in c), None)
            if col_disciplina and col_total:
                df["munic√≠pio"] = m
                dfs_renomeados.append(df[[col_disciplina, col_total, "munic√≠pio"]])

    if dfs_renomeados:
        df_comparativo = pd.concat(dfs_renomeados)
        fig_comp = px.bar(
            df_comparativo,
            x="disciplina",
            y=col_total,
            color="munic√≠pio",
            barmode="group",
            title="Comparativo de Candidatos por Disciplina entre Munic√≠pios",
            labels={"disciplina": "Disciplina", "quantidade": "Quantidade"}
        )
        st.plotly_chart(fig_comp, use_container_width=True)

# ------------------------------------------------------------
# GR√ÅFICOS DE PIZZA POR MUNIC√çPIO E DISCIPLINA
# ------------------------------------------------------------
with aba3:
    st.header("ü•ß Gr√°ficos de Pizza - Indicadores por Disciplina e Munic√≠pio")

    for m, df in dados_municipios.items():
        if not df.empty:
            st.subheader(f"{m}")

            for _, linha in df.iterrows():
                disciplina = linha["Disciplina"]

                # Fatias da pizza (sem total e sem documentos analisados)
                valores = linha[["Aguardando an√°lise", "Eliminados", "Reclassificados"]]

                # Indicadores complementares
                total_candidatos = linha["Total de candidatos"]
                documentos_analisados = linha["Documentos analisados"]
                convocados = linha["Convocados"]

                # Criar gr√°fico de pizza
                fig_pizza = px.pie(
                    values=valores.values,
                    names=valores.index,
                    title=f"{disciplina} - {m}",
                    color_discrete_sequence=px.colors.qualitative.Pastel
                )

                # Layout de duas colunas ‚Äî gr√°fico + indicadores
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.plotly_chart(fig_pizza, use_container_width=True)
                with col2:
                    st.markdown(f"**üìò Disciplina:** {disciplina}")
                    st.markdown(f"**üë• Total de candidatos:** {int(total_candidatos)}")
                    st.markdown(f"**üìÑ Documentos analisados:** {int(documentos_analisados)}")
                    st.markdown(f"**üìã Convocados:** {int(convocados)}")
