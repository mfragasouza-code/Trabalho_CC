import streamlit as st
import pandas as pd
import plotly.express as px

# ------------------------------------------------------------
# CONFIGURA√á√ïES GERAIS
# ------------------------------------------------------------
st.set_page_config(
    page_title="Painel de Indicadores - Editais 2024",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ------------------------------------------------------------
# MENU LATERAL
# ------------------------------------------------------------
st.sidebar.title("üìÅ Navega√ß√£o")
pagina = st.sidebar.radio(
    "Selecione uma op√ß√£o:",
    ["P√°gina Inicial", "Edital 40/2024", "Edital 42/2024"]
)

# ------------------------------------------------------------
# FUN√á√ÉO PARA CARREGAR DADOS
# ------------------------------------------------------------
@st.cache_data
def carregar_dados(edital):
    """
    Carrega as bases de dados conforme o edital escolhido.
    Cada edital tem seus pr√≥prios arquivos Excel.
    """
    try:
        if edital == "40/2024":
            vitoria = pd.read_excel("vitoria_40.xlsx")
            serra = pd.read_excel("serra_40.xlsx")
            fundao = pd.read_excel("fundao_40.xlsx")
            santa_teresa = pd.read_excel("santa_teresa_40.xlsx")
        elif edital == "42/2024":
            vitoria = pd.read_excel("vitoria_42.xlsx")
            serra = pd.read_excel("serra_42.xlsx")
            fundao = pd.read_excel("fundao_42.xlsx")
            santa_teresa = pd.read_excel("santa_teresa_42.xlsx")
        else:
            return {}

        return {
            "Vit√≥ria": vitoria,
            "Serra": serra,
            "Fund√£o": fundao,
            "Santa Teresa": santa_teresa
        }
    except FileNotFoundError:
        st.error("‚ö†Ô∏è Alguns arquivos de dados n√£o foram encontrados no diret√≥rio.")
        return {}

# ------------------------------------------------------------
# P√ÅGINA INICIAL
# ------------------------------------------------------------
if pagina == "P√°gina Inicial":
    st.title("üè† Painel de Acompanhamento dos Editais 2024")
    st.markdown("""
    Bem-vindo ao **Painel de Indicadores** dos processos seletivos do Magist√©rio 2024.

    Este painel foi desenvolvido para apresentar informa√ß√µes comparativas entre os 
    **Editais 40/2024** e **42/2024**, com indicadores detalhados por munic√≠pio e por disciplina.

    ---
    **üìä Se√ß√µes dispon√≠veis:**
    - **P√°gina Inicial**: vis√£o geral e introdu√ß√£o.
    - **Edital 40/2024**: informa√ß√µes, tabelas e gr√°ficos do primeiro edital.
    - **Edital 42/2024**: informa√ß√µes, tabelas e gr√°ficos do segundo edital.

    ---
    Use o menu lateral para navegar.
    """)

# ------------------------------------------------------------
# FUN√á√ÉO AUXILIAR PARA GR√ÅFICOS DE BARRAS
# ------------------------------------------------------------
def graficos_indicadores(df, municipio):
    colunas = [
        "Total de candidatos",
        "Aguardando an√°lise",
        "Eliminados",
        "Reclassificados",
        "Contratados",
        "Documentos analisados",
        "Convocados"
    ]
    colunas_presentes = [c for c in colunas if c in df.columns]

    if len(colunas_presentes) > 1:
        df_melt = df.melt(
            id_vars=["Disciplina"] if "Disciplina" in df.columns else None,
            value_vars=colunas_presentes,
            var_name="Indicador",
            value_name="Quantidade"
        )

        fig = px.bar(
            df_melt,
            x="Indicador",
            y="Quantidade",
            color="Indicador",
            title=f"Indicadores Gerais - {municipio}",
            text_auto=True
        )
        st.plotly_chart(fig, use_container_width=True)

# ------------------------------------------------------------
# TEMPLATE PARA EDITAIS
# ------------------------------------------------------------
def mostrar_edital(edital, titulo):
    st.title(f"üìò Indicadores - Edital {edital}")
    st.markdown(f"An√°lise dos indicadores do **Edital {edital}**, por munic√≠pio e disciplina.")

    dados_municipios = carregar_dados(edital)

    if not dados_municipios:
        st.warning("‚ö†Ô∏è Nenhum dado carregado. Verifique os arquivos Excel.")
        return

    # Abas internas
    abas = st.tabs(["üìã Vis√£o Geral", "üìä Gr√°ficos Comparativos", "üìà Gr√°ficos por Disciplina"])

    # --------------------------------------------------------
    # ABA 1 - VIS√ÉO GERAL
    # --------------------------------------------------------
    with abas[0]:
        st.subheader("üìã Tabelas Resumidas por Munic√≠pio")
        for municipio, df in dados_municipios.items():
            st.markdown(f"### üè´ {municipio}")
            st.dataframe(df.head())

    # --------------------------------------------------------
    # ABA 2 - GR√ÅFICOS COMPARATIVOS
    # --------------------------------------------------------
    with abas[1]:
        st.subheader("üìä Gr√°ficos de Indicadores Gerais")
        for municipio, df in dados_municipios.items():
            st.markdown(f"### üèôÔ∏è {municipio}")
            graficos_indicadores(df, municipio)

    # --------------------------------------------------------
    # ABA 3 - GR√ÅFICOS POR DISCIPLINA
    # --------------------------------------------------------
    with abas[2]:
        st.subheader("üìà Distribui√ß√£o por Disciplina")
        for municipio, df in dados_municipios.items():
            st.markdown(f"### üè´ {municipio}")

            # Gr√°fico de pizza - Documentos analisados
            if {"Disciplina", "Documentos analisados"}.issubset(df.columns):
                fig_pie = px.pie(
                    df,
                    values="Documentos analisados",
                    names="Disciplina",
                    title=f"Documentos Analisados - {municipio}"
                )
                st.plotly_chart(fig_pie, use_container_width=True)

            # Gr√°fico de barras - Convocados x Contratados
            if {"Disciplina", "Convocados", "Contratados"}.issubset(df.columns):
                fig_bar = px.bar(
                    df,
                    x="Disciplina",
                    y=["Convocados", "Contratados"],
                    barmode="group",
                    title=f"Convocados vs Contratados - {municipio}",
                    text_auto=True
                )
                st.plotly_chart(fig_bar, use_container_width=True)

# ------------------------------------------------------------
# EXECU√á√ÉO DAS P√ÅGINAS DOS EDITAIS
# ------------------------------------------------------------
if pagina == "Edital 40/2024":
    mostrar_edital("40/2024", "Edital 40/2024")

elif pagina == "Edital 42/2024":
    mostrar_edital("42/2024", "Edital 42/2024")
